// üìÅ app/forgot-password/verify-otp/page.tsx  (—ç—Å–≤—ç–ª —Ç–∞–Ω—ã actual –∑–∞–º)

"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/app/_components/UserProvider";

// ‚úÖ –°—É—É—Ä—å URL (–ª–æ–∫–∞–ª–¥ localhost, production-–¥ Render –¥–æ–º—ç–π–Ω)
const API_BASE =
  process.env.NEXT_PUBLIC_API_BASE_URL || "http://localhost:8000";

export default function VerifyOtpPage() {
  const router = useRouter();
  const { user, loading } = useAuth();

  const [email, setEmail] = useState("");
  const [otp, setOtp] = useState("");
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");

  /* ‚îÄ‚îÄ‚îÄ –ù—ç–≤—Ç—ç—Ä—Å—ç–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á –±–æ–ª homepage —Ä“Ø“Ø ‚îÄ‚îÄ‚îÄ */
  useEffect(() => {
    if (!loading && user) router.push("/");
  }, [user, loading, router]);

  /* ‚îÄ‚îÄ‚îÄ URL-—ç—ç—Å –∏–º—ç–π–ª—ç—ç –∞–≤–∞–∞–¥ fallback localStorage ‚îÄ‚îÄ‚îÄ */
  useEffect(() => {
    if (typeof window === "undefined") return;
    const params = new URLSearchParams(window.location.search);
    const emailFromURL = params.get("email");
    const fallback = localStorage.getItem("reset-email");
    if (emailFromURL) setEmail(emailFromURL.trim());
    else if (fallback) setEmail(fallback.trim());
    else setError("–ò–º—ç–π–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π. –ë—É—Ü–∞–∂ –¥–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.");
  }, []);

  /* ‚îÄ‚îÄ‚îÄ OTP –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö ‚îÄ‚îÄ‚îÄ */
  const handleVerify = async () => {
    setError(""); setSuccess("");
    if (!email) { setError("–ò–º—ç–π–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π."); return; }

    try {
      const res = await fetch(`${API_BASE}/auth/verify-otp`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          email: email.toLowerCase().trim(),
          code: otp,
        }),
        credentials: "include",
      });

      const data = await res.json();

      if (!res.ok) {
        setError(data.message || "OTP –±—É—Ä—É—É –±–∞–π–Ω–∞.");
        return;
      }

      /* Backend-—ç—ç—Å token –±—É—Ü–∞–∞–∂ –±–∞–π–≥–∞–∞ –≥—ç–∂ —Ç”©—Å”©”©–ª”©–≤ */
      router.push(`/reset-password/${data.token}`);
    } catch (err) {
      console.error("Verify OTP error:", err);
      setError("–°–µ—Ä–≤–µ—Ä—Ç—ç–π —Ö–æ–ª–±–æ–≥–¥–æ–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π.");
    }
  };

  /* ‚îÄ‚îÄ‚îÄ OTP –¥–∞—Ö–∏–Ω –∏–ª–≥—ç—ç—Ö ‚îÄ‚îÄ‚îÄ */
  const handleResend = async () => {
    setError(""); setSuccess("");
    if (!email) { setError("–ò–º—ç–π–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π."); return; }

    try {
      const res = await fetch(`${API_BASE}/auth/forgot-password`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email: email.toLowerCase().trim() }),
        credentials: "include",
      });

      const data = await res.json();

      if (!res.ok) {
        setError(data.message || "–®–∏–Ω—ç OTP –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.");
      } else {
        setSuccess("–®–∏–Ω—ç OTP —Ç–∞–Ω—ã –∏–º—ç–π–ª–¥ –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç.");
      }
    } catch (err) {
      setError("–°–µ—Ä–≤–µ—Ä –∞–ª–¥–∞–∞ ”©–≥–ª”©”©.");
    }
  };

  /* ‚îÄ‚îÄ‚îÄ UI ‚îÄ‚îÄ‚îÄ */
  return (
    <div className="flex h-screen bg-white text-black">
      <div className="w-full md:w-1/2 flex items-center justify-center p-6">
        <div className="w-full max-w-sm space-y-6">
          <button
            type="button"
            onClick={() => router.push("/forgot-password")}
            className="text-xl w-8 h-8 flex items-center justify-center border rounded hover:bg-gray-100"
          >
            ‚Üê
          </button>

          <h1 className="text-2xl font-bold">Enter OTP</h1>

          <input
            type="text"
            placeholder="6-digit OTP"
            maxLength={6}
            value={otp}
            onChange={(e) => setOtp(e.target.value)}
            className="w-full border px-4 py-2 rounded"
          />

          {error && <p className="text-red-500 text-sm">{error}</p>}
          {success && <p className="text-green-600 text-sm">{success}</p>}

          <button
            onClick={handleVerify}
            disabled={otp.length !== 6}
            className={`w-full py-2 rounded font-semibold transition ${
              otp.length !== 6
                ? "bg-gray-200 text-gray-400 cursor-not-allowed"
                : "bg-black text-white hover:bg-gray-800"
            }`}
          >
            Verify OTP
          </button>

          <button
            onClick={handleResend}
            className="text-sm text-blue-500 hover:underline"
          >
            Resend OTP
          </button>
        </div>
      </div>

      <div className="hidden md:block w-1/2 relative">
        <img
          src="/signup.png"
          alt="OTP verification"
          className="w-full h-full object-cover"
        />
      </div>
    </div>
  );
}

import mongoose, { Schema, Document, Types } from "mongoose";

// üßæ –ó–∞—Ö–∏–∞–ª–≥—ã–Ω –Ω—ç–≥ —Ö–æ–æ–ª–Ω—ã —Ç”©—Ä”©–ª
export interface FoodOrderItemType {
  food: Types.ObjectId;
  quantity: number;
}

// üßæ –ë“Ø—Ö –∑–∞—Ö–∏–∞–ª–≥—ã–Ω —Ç”©—Ä”©–ª
export interface FoodOrderType extends Document {
  _id: Types.ObjectId;
  user: Types.ObjectId;
  totalPrice: number;
  foodOrderItems: FoodOrderItemType[];
  status: "PENDING" | "CANCELED" | "DELIVERED";
  createdAt: Date;
  updatedAt: Date;
}

// üß© –î–æ—Ç–æ–æ–¥ —Ö–æ–æ–ª –±“Ø—Ä–∏–π–Ω schema
const FoodOrderItemSchema = new Schema<FoodOrderItemType>(
  {
    food: { type: Schema.Types.ObjectId, ref: "Food", required: true },
    quantity: { type: Number, required: true },
  },
  { _id: false }
);

// üì¶ –ù–∏–π—Ç –∑–∞—Ö–∏–∞–ª–≥—ã–Ω schema
const FoodOrderSchema = new Schema<FoodOrderType>(
  {
    user: { type: Schema.Types.ObjectId, ref: "User", required: true },
    totalPrice: { type: Number, required: true },
    foodOrderItems: {
      type: [FoodOrderItemSchema],
      required: true,
    },
    status: {
      type: String,
      enum: ["PENDING", "CANCELED", "DELIVERED"],
      default: "PENDING",
    },
  },
  { timestamps: true }
);

// ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞
export const FoodOrderModel = mongoose.model<FoodOrderType>(
  "FoodOrder",
  FoodOrderSchema,
  "foodorders"
);

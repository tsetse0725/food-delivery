import { Request, Response } from "express";
import { FoodModel } from "../models/Food.model";

export const getAllFoods = async (req: Request, res: Response) => {
  try {
    const foods = await FoodModel.find().populate("category", "categoryName");
    res.json(foods);
  } catch (error) {
    console.error("‚ùå Food fetch error:", error);
    res.status(500).json({ message: "Internal server error" });
  }
};

export const addNewFood = async (req: Request, res: Response) => {
  try {
    const { foodName, price, image, ingredients, category } = req.body;

    // üß™ –•–æ–æ—Å–æ–Ω —Ç–∞–ª–±–∞—Ä —à–∞–ª–≥–∞—Ö
    if (!foodName || !price || !image || !category) {
      return res.status(400).json({ message: "–ë“Ø—Ö —Ç–∞–ª–±–∞—Ä—ã–≥ –±”©–≥–ª”©–Ω”© “Ø“Ø" });
    }

    // üõ° –î–∞–≤—Ö–∞—Ä–¥–∞–ª —à–∞–ª–≥–∞—Ö
    const existing = await FoodModel.findOne({ foodName });
    if (existing) {
      return res.status(400).json({ message: "–≠–Ω—ç –Ω—ç—Ä—Ç—ç–π —Ö–æ–æ–ª –∞–ª—å —Ö—ç–¥–∏–π–Ω –±“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω –±–∞–π–Ω–∞" });
    }

    // üÜï –•–æ–æ–ª “Ø“Ø—Å–≥—ç—Ö
    const newFood = await FoodModel.create({
      foodName,
      price,
      image,
      ingredients,
      category,
    });

    res.status(201).json({
      message: "–•–æ–æ–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π –Ω—ç–º—ç–≥–¥–ª—ç—ç",
      food: newFood,
    });

  } catch (error) {
    console.error("‚ùå Food create error:", error);
    res.status(500).json({ message: "Internal server error" });
  }
};

